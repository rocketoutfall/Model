<<<<<<< HEAD
while (D>0.001){
y <- y+0.0001
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
=======
View(HMdata)
i <- 3
HMdata <- DR19
# Making heatmaps
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
pal <- brewer.pal(max(HMdata)+1,"Greens")
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
# pal <- brewer.pal(max(HMdata)+1,"Greens")
pal <- cm.colors(256)
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
i <- 1
HMdata <- DR20
# Making heatmaps
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
# pal <- brewer.pal(max(HMdata)+1,"Greens")
pal <- cm.colors(256)
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
i <- 2
HMdata <- SR20
# Making heatmaps
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
# pal <- brewer.pal(max(HMdata)+1,"Greens")
pal <- cm.colors(256)
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
i <- 3
HMdata <- DR19
# Making heatmaps
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
# pal <- brewer.pal(max(HMdata)+1,"Greens")
pal <- cm.colors(256)
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
before function
i <- 4
HMdata <- SR19
# Making heatmaps
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
# pal <- brewer.pal(max(HMdata)+1,"Greens")
pal <- cm.colors(256)
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
i <- 5
HMdata <- Inv20
# Making heatmaps
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
# pal <- brewer.pal(max(HMdata)+1,"Greens")
pal <- cm.colors(256)
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
# before function
i <- 6
HMdata <- Inv19
# Making heatmaps
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
# pal <- brewer.pal(max(HMdata)+1,"Greens")
pal <- cm.colors(256)
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
pal <- colorRampPalette(brewer.pal(256, "Greens"))(max(HMdata)+1)
pal <- colorRampPalette(brewer.pal(9, "Greens"))(256)
i <- 1
HMdata <- DR20
# Making heatmaps
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
pal <- colorRampPalette(brewer.pal(9, "Greens"))(256)
# pal <- brewer.pal(max(HMdata)+1,"Greens")
# pal <- cm.colors(256)
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
makeHM <- function(i=1, HMdata=DR20, FT = c("DR20", "SR20", "DR19", "SR19", "Inv20", "Inv19"),
type = c("Deep-Rooted", "Shallow-Rooted", "Deep-Rooted", "Shallow-Rooted", "Invasive Grass", "Invasive Grass"),
CH = c(20, 20, 19, 19, 20, 19)){
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
pal <- colorRampPalette(brewer.pal(9, "Greens"))(256)
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
>>>>>>> b485a85156bb8a139c02e8745240732f38fcbc63
}
makeHM()
makeHM(2, SR20)
makeHM(1, DR20)
makeHM(2, SR20)
makeHM(3, DR19)
makeHM(4, SR19)
makeHM(5, Inv20)
makeHM(6, Inv19)
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
DR19 <- ftsummation(19, "FT", "DR", 18)
SR19 <- ftsummation(19, "FT", "SR", 18)
DR20 <- ftsummation(20, "FT", "DR", 7)
SR20 <- ftsummation(20, "FT", "SR", 7)
Inv19 <- ftsummation(19, "N_I", "0", 18)
Inv20 <- ftsummation(20, "N_I", "0", 7)
i=1
HMdata=DR20
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
pal <- colorRampPalette(brewer.pal(9, "Greens"))(256)
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
FT <- c("DR20", "SR20", "DR19", "SR19", "Inv20", "Inv19")
type <- c("Deep-Rooted", "Shallow-Rooted", "Deep-Rooted", "Shallow-Rooted", "Invasive Grass", "Invasive Grass")
CH <- c(20, 20, 19, 19, 20, 19)
FT <- c("DR20", "SR20", "DR19", "SR19", "Inv20", "Inv19")
type <- c("Deep-Rooted", "Shallow-Rooted", "Deep-Rooted", "Shallow-Rooted", "Invasive Grass", "Invasive Grass")
CH <- c(20, 20, 19, 19, 20, 19)
#Testing
i=1
HMdata=DR20
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
pal <- colorRampPalette(brewer.pal(9, "Greens"))(256)
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
for(i in 1:length(FT)){
print(max(FT[i]))
}
<<<<<<< HEAD
<<<<<<< HEAD
R<- A/P
V <- (R^(2/3)*sqrt(s))/(n)
Q <- A*V
Section <- seq(1:max(data$Section))
flow <- data.frame(Section, A, P, R, V, Q, Y)
data <- left_join(data, flow, by = "Section")
write.csv(data, file = "Data/Channel.csv", row.names = F)
write.csv(flow, file = "Data/Flow.csv", row.names = F)
View(flow)
View(data)
Waterdepth<-data.frame(Section,Y)
View(Waterdepth)
flow <- data.frame(Section, A, P, R, V, Q)
data <- left_join(data, flow, by = "Section")
View(flow)
flow <- data.frame(Section, A, P, R, V, Q, Y)
data <- left_join(data, flow, by = "Section")
View(data)
write.csv(Waterdepth, file = "Data/Water_Depth.csv", row.names = F)
=======
#########################
# Outfall002 coordenates
########################
library(tidyverse)
>>>>>>> origin/master
data=read.csv("Data/ChannelMatlab.csv", sep=";", dec = ",", na.strings = "NaN")  # loading Outfall 002 Data
data$X <- data$X*2.54/100 # Convert to meters
data$Y <- data$Y*2.54/100
data$Z <- data$Z/100
<<<<<<< HEAD
=======
slopes=read.csv("Data/slopes.csv")  #integrate slopes
slopes.expanded <- slopes[rep(row.names(slopes), slopes$Rep), 1:2] %>%
select(Slope)
data <- bind_cols(data, slopes.expanded)
>>>>>>> origin/master
A <- 0
P <- 0
Y <- 0
for (i in 1:max(data$Section)){
# extract profile of interest
profile <- data %>%
filter(Section == i, !Position == "Mid") %>%
select(Position, Y, Z, n, Slope)
plot(profile$Y, -profile$Z)
# Sys.sleep(2)
n = mean(profile$n) # Calculate the mean of n
# Extract vertices
a <- filter(profile, Position == "Lout") %>%
select(Y,Z)
b <- filter(profile, Position == "Lin") %>%
select(Y,Z)
c <- filter(profile, Position == "Rin") %>%
select(Y,Z)
d <- filter(profile, Position == "Rout") %>%
select(Y,Z)
#  e <- filter(profile, Position == "Lout") %>%
#    select(Y,Z)
z1 <- 1/abs((b$Z-a$Z)/(b$Y-a$Y))
z2 <- 1/abs((d$Z-c$Z)/(d$Y-c$Y))
# Calculate area
Base <- d$Y-a$Y
base <- c$Y-b$Y
h1 <- b$Z
h2 <- c$Z
abc <- base*h1/2
acd <- Base*h2/2
A[i] = abc + acd
# calcular perÃ¬metro
l1 <- sqrt((a$Y-b$Y)^2+(a$Z-b$Z)^2)
l2 <- sqrt((b$Y-c$Y)^2+(b$Z-c$Z)^2)
l3 <- sqrt((c$Y-d$Y)^2+(c$Z-d$Z)^2)
l4 <- sqrt((d$Y-a$Y)^2+(d$Z-a$Z)^2)
P[i] <- l1+l2+l3+l4
# calcular pendiente
<<<<<<< HEAD
s = 0.082 #For now its a fixed value until we fix our data
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 400 * 3.785 / 1000
=======
s1 <- filter(profile, Position == "Rout") %>%
select(Slope)
s <- s1$Slope
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 399 * 3.785 / 1000
>>>>>>> origin/master
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
while (D>0.001){
y <- y+0.0001
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
}
Y[i] <- y
}
R<- A/P
V <- (R^(2/3)*sqrt(s))/(n)
Q <- A*V
Section <- seq(1:max(data$Section))
flow <- data.frame(Section, A, P, R, V, Q, Y)
data <- left_join(data, flow, by = "Section")
Waterdepth<-data.frame(Section,Y)
<<<<<<< HEAD
write.csv(Waterdepth, file = "Data/Water_Depth.csv", row.names = F)
write.csv(data, file = "Data/Channel.csv", row.names = F)
write.csv(flow, file = "Data/Flow.csv", row.names = F)
=======
write.csv(Waterdepth, file = "Data/WD.csv", row.names = F)
write.csv(data, file = "Data/Channel.csv", row.names = F)
write.csv(flow, file = "Data/Flow.csv", row.names = F)
# for(i in 1:10){
#   JC[i] <- 2*i+4
#   print(i)
# }
#########################
# Outfall002 coordenates
########################
library(tidyverse)
>>>>>>> origin/master
data=read.csv("Data/ChannelMatlab.csv", sep=";", dec = ",", na.strings = "NaN")  # loading Outfall 002 Data
data$X <- data$X*2.54/100 # Convert to meters
data$Y <- data$Y*2.54/100
data$Z <- data$Z/100
<<<<<<< HEAD
=======
slopes=read.csv("Data/slopes.csv")  #integrate slopes
slopes.expanded <- slopes[rep(row.names(slopes), slopes$Rep), 1:2] %>%
select(Slope)
data <- bind_cols(data, slopes.expanded)
>>>>>>> origin/master
A <- 0
P <- 0
Y <- 0
for (i in 1:max(data$Section)){
# extract profile of interest
profile <- data %>%
filter(Section == i, !Position == "Mid") %>%
select(Position, Y, Z, n, Slope)
plot(profile$Y, -profile$Z)
# Sys.sleep(2)
n = mean(profile$n) # Calculate the mean of n
# Extract vertices
a <- filter(profile, Position == "Lout") %>%
select(Y,Z)
b <- filter(profile, Position == "Lin") %>%
select(Y,Z)
c <- filter(profile, Position == "Rin") %>%
select(Y,Z)
d <- filter(profile, Position == "Rout") %>%
select(Y,Z)
#  e <- filter(profile, Position == "Lout") %>%
#    select(Y,Z)
z1 <- 1/abs((b$Z-a$Z)/(b$Y-a$Y))
z2 <- 1/abs((d$Z-c$Z)/(d$Y-c$Y))
# Calculate area
Base <- d$Y-a$Y
base <- c$Y-b$Y
h1 <- b$Z
h2 <- c$Z
abc <- base*h1/2
acd <- Base*h2/2
A[i] = abc + acd
# calcular perÃ¬metro
l1 <- sqrt((a$Y-b$Y)^2+(a$Z-b$Z)^2)
l2 <- sqrt((b$Y-c$Y)^2+(b$Z-c$Z)^2)
l3 <- sqrt((c$Y-d$Y)^2+(c$Z-d$Z)^2)
l4 <- sqrt((d$Y-a$Y)^2+(d$Z-a$Z)^2)
P[i] <- l1+l2+l3+l4
# calcular pendiente
<<<<<<< HEAD
s = 0.082 #For now its a fixed value until we fix our data
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 60 * 3.785 / 1000
=======
s1 <- filter(profile, Position == "Rout") %>%
select(Slope)
s <- s1$Slope
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 400 * 3.785 / 1000
>>>>>>> origin/master
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
while (D>0.001){
y <- y+0.0001
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
<<<<<<< HEAD
}
Y[i] <- y
}
R<- A/P
V <- (R^(2/3)*sqrt(s))/(n)
Q <- A*V
Section <- seq(1:max(data$Section))
flow <- data.frame(Section, A, P, R, V, Q, Y)
data <- left_join(data, flow, by = "Section")
Waterdepth<-data.frame(Section,Y)
write.csv(Waterdepth, file = "Data/Water_Depth.csv", row.names = F)
write.csv(data, file = "Data/Channel.csv", row.names = F)
write.csv(flow, file = "Data/Flow.csv", row.names = F)
class(Waterdepth$Y)
=======
}
Y[i] <- y
}
#########################
# Outfall002 coordenates
########################
library(tidyverse)
>>>>>>> origin/master
data=read.csv("Data/ChannelMatlab.csv", sep=";", dec = ",", na.strings = "NaN")  # loading Outfall 002 Data
data$X <- data$X*2.54/100 # Convert to meters
data$Y <- data$Y*2.54/100
data$Z <- data$Z/100
<<<<<<< HEAD
=======
slopes=read.csv("Data/slopes.csv")  #integrate slopes
slopes.expanded <- slopes[rep(row.names(slopes), slopes$Rep), 1:2] %>%
select(Slope)
data <- bind_cols(data, slopes.expanded)
>>>>>>> origin/master
A <- 0
P <- 0
Y <- 0
for (i in 1:max(data$Section)){
# extract profile of interest
profile <- data %>%
filter(Section == i, !Position == "Mid") %>%
select(Position, Y, Z, n, Slope)
plot(profile$Y, -profile$Z)
# Sys.sleep(2)
n = mean(profile$n) # Calculate the mean of n
# Extract vertices
a <- filter(profile, Position == "Lout") %>%
select(Y,Z)
b <- filter(profile, Position == "Lin") %>%
select(Y,Z)
c <- filter(profile, Position == "Rin") %>%
select(Y,Z)
d <- filter(profile, Position == "Rout") %>%
select(Y,Z)
#  e <- filter(profile, Position == "Lout") %>%
#    select(Y,Z)
z1 <- 1/abs((b$Z-a$Z)/(b$Y-a$Y))
z2 <- 1/abs((d$Z-c$Z)/(d$Y-c$Y))
# Calculate area
Base <- d$Y-a$Y
base <- c$Y-b$Y
h1 <- b$Z
h2 <- c$Z
abc <- base*h1/2
acd <- Base*h2/2
A[i] = abc + acd
# calcular perÃ¬metro
l1 <- sqrt((a$Y-b$Y)^2+(a$Z-b$Z)^2)
l2 <- sqrt((b$Y-c$Y)^2+(b$Z-c$Z)^2)
l3 <- sqrt((c$Y-d$Y)^2+(c$Z-d$Z)^2)
l4 <- sqrt((d$Y-a$Y)^2+(d$Z-a$Z)^2)
P[i] <- l1+l2+l3+l4
# calcular pendiente
<<<<<<< HEAD
s = 0.082 #For now its a fixed value until we fix our data
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 60 * 3.785 / 1000
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
while (D>0.001){
=======
s1 <- filter(profile, Position == "Rout") %>%
select(Slope)
s <- s1$Slope
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 400 * 3.785 / 1000
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
while (D>0.01){
>>>>>>> origin/master
y <- y+0.0001
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
}
Y[i] <- y
}
R<- A/P
V <- (R^(2/3)*sqrt(s))/(n)
Q <- A*V
Section <- seq(1:max(data$Section))
flow <- data.frame(Section, A, P, R, V, Q, Y)
data <- left_join(data, flow, by = "Section")
Waterdepth<-data.frame(Section,Y)
write.csv(Waterdepth, file = "Data/WD.csv", row.names = F)
write.csv(data, file = "Data/Channel.csv", row.names = F)
write.csv(flow, file = "Data/Flow.csv", row.names = F)
<<<<<<< HEAD
=======
# for(i in 1:10){
#   JC[i] <- 2*i+4
#   print(i)
# }
#########################
# Outfall002 coordenates
########################
library(tidyverse)
>>>>>>> origin/master
data=read.csv("Data/ChannelMatlab.csv", sep=";", dec = ",", na.strings = "NaN")  # loading Outfall 002 Data
data$X <- data$X*2.54/100 # Convert to meters
data$Y <- data$Y*2.54/100
data$Z <- data$Z/100
<<<<<<< HEAD
=======
slopes=read.csv("Data/slopes.csv")  #integrate slopes
slopes.expanded <- slopes[rep(row.names(slopes), slopes$Rep), 1:2] %>%
select(Slope)
data <- bind_cols(data, slopes.expanded)
>>>>>>> origin/master
A <- 0
P <- 0
Y <- 0
for (i in 1:max(data$Section)){
# extract profile of interest
profile <- data %>%
filter(Section == i, !Position == "Mid") %>%
select(Position, Y, Z, n, Slope)
plot(profile$Y, -profile$Z)
# Sys.sleep(2)
n = mean(profile$n) # Calculate the mean of n
# Extract vertices
a <- filter(profile, Position == "Lout") %>%
select(Y,Z)
b <- filter(profile, Position == "Lin") %>%
select(Y,Z)
c <- filter(profile, Position == "Rin") %>%
select(Y,Z)
d <- filter(profile, Position == "Rout") %>%
select(Y,Z)
#  e <- filter(profile, Position == "Lout") %>%
#    select(Y,Z)
z1 <- 1/abs((b$Z-a$Z)/(b$Y-a$Y))
z2 <- 1/abs((d$Z-c$Z)/(d$Y-c$Y))
# Calculate area
Base <- d$Y-a$Y
base <- c$Y-b$Y
h1 <- b$Z
h2 <- c$Z
abc <- base*h1/2
acd <- Base*h2/2
A[i] = abc + acd
# calcular perÃ¬metro
l1 <- sqrt((a$Y-b$Y)^2+(a$Z-b$Z)^2)
l2 <- sqrt((b$Y-c$Y)^2+(b$Z-c$Z)^2)
l3 <- sqrt((c$Y-d$Y)^2+(c$Z-d$Z)^2)
l4 <- sqrt((d$Y-a$Y)^2+(d$Z-a$Z)^2)
P[i] <- l1+l2+l3+l4
# calcular pendiente
<<<<<<< HEAD
s = 0.082 #For now its a fixed value until we fix our data
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 60 * 3.785 / 1000
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
while (D>0.001){
=======
s1 <- filter(profile, Position == "Rout") %>%
select(Slope)
s <- s1$Slope
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 460 * 3.785 / 1000
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
while (D>0.01){
>>>>>>> origin/master
y <- y+0.0001
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
}
Y[i] <- y
}
R<- A/P
V <- (R^(2/3)*sqrt(s))/(n)
Q <- A*V
Section <- seq(1:max(data$Section))
flow <- data.frame(Section, A, P, R, V, Q, Y)
data <- left_join(data, flow, by = "Section")
Waterdepth<-data.frame(Section,Y)
write.csv(Waterdepth, file = "Data/WD.csv", row.names = F)
write.csv(data, file = "Data/Channel.csv", row.names = F)
write.csv(flow, file = "Data/Flow.csv", row.names = F)
<<<<<<< HEAD
data=read.csv("Data/ChannelMatlab.csv", sep=";", dec = ",", na.strings = "NaN")  # loading Outfall 002 Data
data$X <- data$X*2.54/100 # Convert to meters
data$Y <- data$Y*2.54/100
data$Z <- data$Z/100
A <- 0
P <- 0
Y <- 0
for (i in 1:max(data$Section)){
# extract profile of interest
profile <- data %>%
filter(Section == i, !Position == "Mid") %>%
select(Position, Y, Z, n)
plot(profile$Y, -profile$Z)
# Sys.sleep(2)
n = mean(profile$n) # Calculate the mean of n
# Extract vertices
a <- filter(profile, Position == "Lout") %>%
select(Y,Z)
b <- filter(profile, Position == "Lin") %>%
select(Y,Z)
c <- filter(profile, Position == "Rin") %>%
select(Y,Z)
d <- filter(profile, Position == "Rout") %>%
select(Y,Z)
#  e <- filter(profile, Position == "Lout") %>%
#    select(Y,Z)
z1 <- 1/abs((b$Z-a$Z)/(b$Y-a$Y))
z2 <- 1/abs((d$Z-c$Z)/(d$Y-c$Y))
# Calculate area
Base <- d$Y-a$Y
base <- c$Y-b$Y
h1 <- b$Z
h2 <- c$Z
abc <- base*h1/2
acd <- Base*h2/2
A[i] = abc + acd
# calcular perÃ¬metro
l1 <- sqrt((a$Y-b$Y)^2+(a$Z-b$Z)^2)
l2 <- sqrt((b$Y-c$Y)^2+(b$Z-c$Z)^2)
l3 <- sqrt((c$Y-d$Y)^2+(c$Z-d$Z)^2)
l4 <- sqrt((d$Y-a$Y)^2+(d$Z-a$Z)^2)
P[i] <- l1+l2+l3+l4
# calcular pendiente
s = 0.082 #For now its a fixed value until we fix our data
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 60 * 3.785 / 1000
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
while (D>0.001){
y <- y+0.0001
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
}
Y[i] <- y
}
R<- A/P
V <- (R^(2/3)*sqrt(s))/(n)
Q <- A*V
Section <- seq(1:max(data$Section))
flow <- data.frame(Section, A, P, R, V, Q, Y)
data <- left_join(data, flow, by = "Section")
Waterdepth<-data.frame(Section,Y)
write.csv(Waterdepth, file = "Data/WD.csv", row.names = F)
write.csv(data, file = "Data/Channel.csv", row.names = F)
write.csv(flow, file = "Data/Flow.csv", row.names = F)
=======
# for(i in 1:10){
#   JC[i] <- 2*i+4
#   print(i)
# }
>>>>>>> origin/master
2+2
a = funtion(x){a+1}
a = funtion(x){x+1}
a <- funtion(x){x+1}
a <- function(x){x+1}
a(1)
b <- function(x){2*x}
b(2)
b(a(1))
install.packages("tidyverse")
value <- my.second.function(my.first.function(1))
my.first.function <- function(x){x+1}
my.second.function <- function(x){2*x}
value <- my.second.function(my.first.function(1))
value <- my.first.function(1)
value <- my.second.function(value)
value <- my.second.function(value)
value <- my.second.function(my.first.function(1))
value <- my.second.function(my.first.function(1))
value <- my.second.function(my.first.function(1))
value <- my.second.function(value)
value <- my.first.function(1) %>%
my.second.function()
library(tidyverse)
value <- my.first.function(1) %>%
my.second.function()
value
=======
max(DR20)
max(DR20)
max(SR20)
max(DR19)
max(SR19)
max(Inv20)
max(Inv19)
View(Inv19)
View(Inv19)
HMdata=DR20
colnames(HMdata)  <- c("Bed","Bank", "Upland")
View(DR20)
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
makeHM(1, DR20)
makeHM(2, SR20)
makeHM(3, DR19)
makeHM(4, SR19)
makeHM(5, Inv20)
makeHM(6, Inv19)
#Testing
i=1
HMdata=DR20
#colnames(HMdata)  <- c("Bed","Bank", "Upland")
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
pal <- colorRampPalette(brewer.pal(9, "Greens"))(256)
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
i=1
HMdata=DR20
colnames(HMdata)  <- c("Bed","Bank", "Upland")
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
pal <- colorRampPalette(brewer.pal(9, "Greens"))(256)
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
DR19 <- ftsummation(19, "FT", "DR", 18)
SR19 <- ftsummation(19, "FT", "SR", 18)
DR20 <- ftsummation(20, "FT", "DR", 7)
SR20 <- ftsummation(20, "FT", "SR", 7)
Inv19 <- ftsummation(19, "N_I", "0", 18)
Inv20 <- ftsummation(20, "N_I", "0", 7)
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
allplants(19, 18, "FT")
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
DR19 <- ftsummation(19, "FT", "DR", 18)
SR19 <- ftsummation(19, "FT", "SR", 18)
DR20 <- ftsummation(20, "FT", "DR", 7)
SR20 <- ftsummation(20, "FT", "SR", 7)
Inv19 <- ftsummation(19, "N_I", "0", 18)
Inv20 <- ftsummation(20, "N_I", "0", 7)
View(Inv20)
View(Inv19)
library(readr)
X5Bromu_0 <- read_csv("C:/Users/Elise/Desktop/GitHub/sparrow925.github.io/Model/Data/Plants20/N_I/5Bromu-0.csv")
View(X5Bromu_0)
library(readr)
X19Stipa_0 <- read_csv("C:/Users/Elise/Desktop/GitHub/sparrow925.github.io/Model/Data/Plants20/N_I/19Stipa-0.csv")
View(X19Stipa_0)
X5Bromu_0 + X19Stipa_0
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = "0")
match
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = "*0$")
match
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = "*0")
match
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = "0$")
match
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = ".*0$")
match
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = ".0$")
match
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = ".*0")
match
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = ".*\0$")
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = ".*0$")
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = ".*\0$")
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = ".*\1$")
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = ".*\0$")
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = ".*\\0$")
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = "0$")
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = "*0")
match
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", 20, sep=""), "N_I"), pattern = "*-0")
match
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
DR19 <- ftsummation(19, "FT", "DR", 18)
SR19 <- ftsummation(19, "FT", "SR", 18)
DR20 <- ftsummation(20, "FT", "DR", 7)
SR20 <- ftsummation(20, "FT", "SR", 7)
Inv19 <- ftsummation(19, "N_I", "0", 18)
Inv20 <- ftsummation(20, "N_I", "0", 7)
makeHM(1, DR20)
makeHM(2, SR20)
makeHM(3, DR19)
makeHM(4, SR19)
makeHM(5, Inv20)
makeHM(6, Inv19)
FT <- c("DR20", "SR20", "DR19", "SR19", "Inv20", "Inv19")
type <- c("Deep-Rooted", "Shallow-Rooted", "Deep-Rooted", "Shallow-Rooted", "Invasive Grass", "Invasive ")
CH <- c(20, 20, 19, 19, 20, 19)
#Testing
# Idea for keeping scale relative?
# btw max in any species plot is 6
# http://stackoverflow.com/questions/33126894/keep-scale-of-bubbles-consistent-across-multiple-maps-using-draw-bubble-in-mappl
library(RColorBrewer)
library(lattice)
i=1
HMdata=DR20
colnames(HMdata)  <- c("Bed","Bank", "Upland")
title <- paste("C", CH[i], " Functional Type Density: \n ", type[i], " Species", sep="")
pal <- colorRampPalette(brewer.pal(9, "Greens"))(256)
colseq <- seq(0,max(HMdata)+1,by=1)
png(filename = file.path(getwd(),
"Plant_Locations",
paste("C", CH[i], FT[i], ".png", sep="")
),
width = 460,
height = 550)
print(levelplot(HMdata,
col.regions=pal,
ylab = "From center of creek",
xlab = "Transect (1 = Outfall)",
colorkey = list(at = colseq, labels=list(at=colseq)),
main = title))
dev.off()
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
makeHM(1, DR20)
makeHM(2, SR20)
makeHM(3, DR19)
makeHM(4, SR19)
makeHM(5, Inv20)
makeHM(6, Inv19)
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
makeHM(1, DR20)
makeHM(2, SR20)
makeHM(3, DR19)
makeHM(4, SR19)
makeHM(5, Inv20)
makeHM(6, Inv19)
DR19 <- ftsummation(19, "FT", "DR", 18)
SR19 <- ftsummation(19, "FT", "SR", 18)
DR20 <- ftsummation(20, "FT", "DR", 7)
SR20 <- ftsummation(20, "FT", "SR", 7)
Inv19 <- ftsummation(19, "N_I", "0", 18)
Inv20 <- ftsummation(20, "N_I", "0", 7)
makeHM(1, DR20)
makeHM(2, SR20)
makeHM(3, DR19)
makeHM(4, SR19)
makeHM(5, Inv20)
makeHM(6, Inv19)
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
Inv19 <- ftsummation(19, "Habitat", "T", 18)
Tree19 <- ftsummation(19, "Habitat", "T", 18)
View(Inv19)
View(Inv19)
View(Tree19)
View(Tree19)
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
makeHM(7, Tree19)
Grass19 <- ftsummation(19, "Habitat", "-*G", 18)
Grass19 <- ftsummation(19, "Habitat", ".-*G", 18)
View(Grass19)
View(Grass19)
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
Grass19 <- ftsummation(19, "Habitat", ".-*G", 18)
makeHM(8, Grass19)
Tree20 <- ftsummation(20, "Habitat", "T", 7)
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
Tree20 <- ftsummation(20, "Habitat", "T", 7)
makeHM(7, Tree20)
makeHM(9, Tree20)
View(Tree20)
View(Tree20)
allplants(19, 18, "Habitat")
allplants(20, 7, "Habitat")
Tree20 <- ftsummation(20, "Habitat", "T", 7)
Tree19 <- ftsummation(19, "Habitat", "T", 18)
makeHM(9, Tree20)
Nat19 <- ftsummation(19, "N_I", "1", 18)
Nat20 <- ftsummation(20, "N_I", "1", 7)
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
Nat19 <- ftsummation(19, "N_I", "1", 18)
Nat20 <- ftsummation(20, "N_I", "1", 7)
makeHM(10, Nat19)
makeHM(11, Nat20)
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
Nat19 <- ftsummation(19, "N_I", "1", 18)
Nat20 <- ftsummation(20, "N_I", "1", 7)
Tree19 <- ftsummation(19, "Habitat", "T", 18)
Tree20 <- ftsummation(20, "Habitat", "T", 7)
makeHM(1, DR20)
makeHM(2, SR20)
makeHM(3, DR19)
makeHM(4, SR19)
makeHM(5, Inv20)
makeHM(6, Inv19)
makeHM(7, Tree19)
makeHM(8, Grass19)
makeHM(9, Tree20)
makeHM(10, Nat19)
makeHM(11, Nat20)
Grass19 <- ftsummation(19, "Habitat", ".-*G", 18)
DR19 <- ftsummation(19, "FT", "DR", 18)
SR19 <- ftsummation(19, "FT", "SR", 18)
DR20 <- ftsummation(20, "FT", "DR", 7)
SR20 <- ftsummation(20, "FT", "SR", 7)
Inv19 <- ftsummation(19, "N_I", "0", 18)
Inv20 <- ftsummation(20, "N_I", "0", 7)
Nat19 <- ftsummation(19, "N_I", "1", 18)
Nat20 <- ftsummation(20, "N_I", "1", 7)
Tree19 <- ftsummation(19, "Habitat", "T", 18)
Tree20 <- ftsummation(20, "Habitat", "T", 7)
Grass19 <- ftsummation(19, "Habitat", ".-*G", 18)
makeHM(1, DR20)
makeHM(2, SR20)
makeHM(3, DR19)
makeHM(4, SR19)
makeHM(5, Inv20)
makeHM(6, Inv19)
makeHM(7, Tree19)
makeHM(8, Grass19)
makeHM(9, Tree20)
makeHM(10, Nat19)
makeHM(11, Nat20)
>>>>>>> b485a85156bb8a139c02e8745240732f38fcbc63
