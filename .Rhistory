while (D>0.001){
y <- y+0.0001
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
}
Y[i] <- y
}
<<<<<<< HEAD
R<- A/P
V <- (R^(2/3)*sqrt(s))/(n)
Q <- A*V
Section <- seq(1:max(data$Section))
flow <- data.frame(Section, A, P, R, V, Q, Y)
data <- left_join(data, flow, by = "Section")
write.csv(data, file = "Data/Channel.csv", row.names = F)
write.csv(flow, file = "Data/Flow.csv", row.names = F)
View(flow)
View(data)
Waterdepth<-data.frame(Section,Y)
View(Waterdepth)
flow <- data.frame(Section, A, P, R, V, Q)
data <- left_join(data, flow, by = "Section")
View(flow)
flow <- data.frame(Section, A, P, R, V, Q, Y)
data <- left_join(data, flow, by = "Section")
View(data)
write.csv(Waterdepth, file = "Data/Water_Depth.csv", row.names = F)
=======
#########################
# Outfall002 coordenates
########################
library(tidyverse)
>>>>>>> origin/master
data=read.csv("Data/ChannelMatlab.csv", sep=";", dec = ",", na.strings = "NaN")  # loading Outfall 002 Data
data$X <- data$X*2.54/100 # Convert to meters
data$Y <- data$Y*2.54/100
data$Z <- data$Z/100
<<<<<<< HEAD
=======
slopes=read.csv("Data/slopes.csv")  #integrate slopes
slopes.expanded <- slopes[rep(row.names(slopes), slopes$Rep), 1:2] %>%
select(Slope)
data <- bind_cols(data, slopes.expanded)
>>>>>>> origin/master
A <- 0
P <- 0
Y <- 0
for (i in 1:max(data$Section)){
# extract profile of interest
profile <- data %>%
filter(Section == i, !Position == "Mid") %>%
select(Position, Y, Z, n, Slope)
plot(profile$Y, -profile$Z)
# Sys.sleep(2)
n = mean(profile$n) # Calculate the mean of n
# Extract vertices
a <- filter(profile, Position == "Lout") %>%
select(Y,Z)
b <- filter(profile, Position == "Lin") %>%
select(Y,Z)
c <- filter(profile, Position == "Rin") %>%
select(Y,Z)
d <- filter(profile, Position == "Rout") %>%
select(Y,Z)
#  e <- filter(profile, Position == "Lout") %>%
#    select(Y,Z)
z1 <- 1/abs((b$Z-a$Z)/(b$Y-a$Y))
z2 <- 1/abs((d$Z-c$Z)/(d$Y-c$Y))
# Calculate area
Base <- d$Y-a$Y
base <- c$Y-b$Y
h1 <- b$Z
h2 <- c$Z
abc <- base*h1/2
acd <- Base*h2/2
A[i] = abc + acd
# calcular perìmetro
l1 <- sqrt((a$Y-b$Y)^2+(a$Z-b$Z)^2)
l2 <- sqrt((b$Y-c$Y)^2+(b$Z-c$Z)^2)
l3 <- sqrt((c$Y-d$Y)^2+(c$Z-d$Z)^2)
l4 <- sqrt((d$Y-a$Y)^2+(d$Z-a$Z)^2)
P[i] <- l1+l2+l3+l4
# calcular pendiente
<<<<<<< HEAD
s = 0.082 #For now its a fixed value until we fix our data
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 400 * 3.785 / 1000
=======
s1 <- filter(profile, Position == "Rout") %>%
select(Slope)
s <- s1$Slope
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 399 * 3.785 / 1000
>>>>>>> origin/master
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
while (D>0.001){
y <- y+0.0001
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
}
Y[i] <- y
}
R<- A/P
V <- (R^(2/3)*sqrt(s))/(n)
Q <- A*V
Section <- seq(1:max(data$Section))
flow <- data.frame(Section, A, P, R, V, Q, Y)
data <- left_join(data, flow, by = "Section")
Waterdepth<-data.frame(Section,Y)
<<<<<<< HEAD
write.csv(Waterdepth, file = "Data/Water_Depth.csv", row.names = F)
write.csv(data, file = "Data/Channel.csv", row.names = F)
write.csv(flow, file = "Data/Flow.csv", row.names = F)
=======
write.csv(Waterdepth, file = "Data/WD.csv", row.names = F)
write.csv(data, file = "Data/Channel.csv", row.names = F)
write.csv(flow, file = "Data/Flow.csv", row.names = F)
# for(i in 1:10){
#   JC[i] <- 2*i+4
#   print(i)
# }
#########################
# Outfall002 coordenates
########################
library(tidyverse)
>>>>>>> origin/master
data=read.csv("Data/ChannelMatlab.csv", sep=";", dec = ",", na.strings = "NaN")  # loading Outfall 002 Data
data$X <- data$X*2.54/100 # Convert to meters
data$Y <- data$Y*2.54/100
data$Z <- data$Z/100
<<<<<<< HEAD
=======
slopes=read.csv("Data/slopes.csv")  #integrate slopes
slopes.expanded <- slopes[rep(row.names(slopes), slopes$Rep), 1:2] %>%
select(Slope)
data <- bind_cols(data, slopes.expanded)
>>>>>>> origin/master
A <- 0
P <- 0
Y <- 0
for (i in 1:max(data$Section)){
# extract profile of interest
profile <- data %>%
filter(Section == i, !Position == "Mid") %>%
select(Position, Y, Z, n, Slope)
plot(profile$Y, -profile$Z)
# Sys.sleep(2)
n = mean(profile$n) # Calculate the mean of n
# Extract vertices
a <- filter(profile, Position == "Lout") %>%
select(Y,Z)
b <- filter(profile, Position == "Lin") %>%
select(Y,Z)
c <- filter(profile, Position == "Rin") %>%
select(Y,Z)
d <- filter(profile, Position == "Rout") %>%
select(Y,Z)
#  e <- filter(profile, Position == "Lout") %>%
#    select(Y,Z)
z1 <- 1/abs((b$Z-a$Z)/(b$Y-a$Y))
z2 <- 1/abs((d$Z-c$Z)/(d$Y-c$Y))
# Calculate area
Base <- d$Y-a$Y
base <- c$Y-b$Y
h1 <- b$Z
h2 <- c$Z
abc <- base*h1/2
acd <- Base*h2/2
A[i] = abc + acd
# calcular perìmetro
l1 <- sqrt((a$Y-b$Y)^2+(a$Z-b$Z)^2)
l2 <- sqrt((b$Y-c$Y)^2+(b$Z-c$Z)^2)
l3 <- sqrt((c$Y-d$Y)^2+(c$Z-d$Z)^2)
l4 <- sqrt((d$Y-a$Y)^2+(d$Z-a$Z)^2)
P[i] <- l1+l2+l3+l4
# calcular pendiente
<<<<<<< HEAD
s = 0.082 #For now its a fixed value until we fix our data
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 60 * 3.785 / 1000
=======
s1 <- filter(profile, Position == "Rout") %>%
select(Slope)
s <- s1$Slope
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 400 * 3.785 / 1000
>>>>>>> origin/master
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
while (D>0.001){
y <- y+0.0001
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
<<<<<<< HEAD
}
Y[i] <- y
}
R<- A/P
V <- (R^(2/3)*sqrt(s))/(n)
Q <- A*V
Section <- seq(1:max(data$Section))
flow <- data.frame(Section, A, P, R, V, Q, Y)
data <- left_join(data, flow, by = "Section")
Waterdepth<-data.frame(Section,Y)
write.csv(Waterdepth, file = "Data/Water_Depth.csv", row.names = F)
write.csv(data, file = "Data/Channel.csv", row.names = F)
write.csv(flow, file = "Data/Flow.csv", row.names = F)
class(Waterdepth$Y)
=======
}
Y[i] <- y
}
#########################
# Outfall002 coordenates
########################
library(tidyverse)
>>>>>>> origin/master
data=read.csv("Data/ChannelMatlab.csv", sep=";", dec = ",", na.strings = "NaN")  # loading Outfall 002 Data
data$X <- data$X*2.54/100 # Convert to meters
data$Y <- data$Y*2.54/100
data$Z <- data$Z/100
<<<<<<< HEAD
=======
slopes=read.csv("Data/slopes.csv")  #integrate slopes
slopes.expanded <- slopes[rep(row.names(slopes), slopes$Rep), 1:2] %>%
select(Slope)
data <- bind_cols(data, slopes.expanded)
>>>>>>> origin/master
A <- 0
P <- 0
Y <- 0
for (i in 1:max(data$Section)){
# extract profile of interest
profile <- data %>%
filter(Section == i, !Position == "Mid") %>%
select(Position, Y, Z, n, Slope)
plot(profile$Y, -profile$Z)
# Sys.sleep(2)
n = mean(profile$n) # Calculate the mean of n
# Extract vertices
a <- filter(profile, Position == "Lout") %>%
select(Y,Z)
b <- filter(profile, Position == "Lin") %>%
select(Y,Z)
c <- filter(profile, Position == "Rin") %>%
select(Y,Z)
d <- filter(profile, Position == "Rout") %>%
select(Y,Z)
#  e <- filter(profile, Position == "Lout") %>%
#    select(Y,Z)
z1 <- 1/abs((b$Z-a$Z)/(b$Y-a$Y))
z2 <- 1/abs((d$Z-c$Z)/(d$Y-c$Y))
# Calculate area
Base <- d$Y-a$Y
base <- c$Y-b$Y
h1 <- b$Z
h2 <- c$Z
abc <- base*h1/2
acd <- Base*h2/2
A[i] = abc + acd
# calcular perìmetro
l1 <- sqrt((a$Y-b$Y)^2+(a$Z-b$Z)^2)
l2 <- sqrt((b$Y-c$Y)^2+(b$Z-c$Z)^2)
l3 <- sqrt((c$Y-d$Y)^2+(c$Z-d$Z)^2)
l4 <- sqrt((d$Y-a$Y)^2+(d$Z-a$Z)^2)
P[i] <- l1+l2+l3+l4
# calcular pendiente
<<<<<<< HEAD
s = 0.082 #For now its a fixed value until we fix our data
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 60 * 3.785 / 1000
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
while (D>0.001){
=======
s1 <- filter(profile, Position == "Rout") %>%
select(Slope)
s <- s1$Slope
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 400 * 3.785 / 1000
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
while (D>0.01){
>>>>>>> origin/master
y <- y+0.0001
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
}
Y[i] <- y
}
R<- A/P
V <- (R^(2/3)*sqrt(s))/(n)
Q <- A*V
Section <- seq(1:max(data$Section))
flow <- data.frame(Section, A, P, R, V, Q, Y)
data <- left_join(data, flow, by = "Section")
Waterdepth<-data.frame(Section,Y)
write.csv(Waterdepth, file = "Data/WD.csv", row.names = F)
write.csv(data, file = "Data/Channel.csv", row.names = F)
write.csv(flow, file = "Data/Flow.csv", row.names = F)
<<<<<<< HEAD
=======
# for(i in 1:10){
#   JC[i] <- 2*i+4
#   print(i)
# }
#########################
# Outfall002 coordenates
########################
library(tidyverse)
>>>>>>> origin/master
data=read.csv("Data/ChannelMatlab.csv", sep=";", dec = ",", na.strings = "NaN")  # loading Outfall 002 Data
data$X <- data$X*2.54/100 # Convert to meters
data$Y <- data$Y*2.54/100
data$Z <- data$Z/100
<<<<<<< HEAD
=======
slopes=read.csv("Data/slopes.csv")  #integrate slopes
slopes.expanded <- slopes[rep(row.names(slopes), slopes$Rep), 1:2] %>%
select(Slope)
data <- bind_cols(data, slopes.expanded)
>>>>>>> origin/master
A <- 0
P <- 0
Y <- 0
for (i in 1:max(data$Section)){
# extract profile of interest
profile <- data %>%
filter(Section == i, !Position == "Mid") %>%
select(Position, Y, Z, n, Slope)
plot(profile$Y, -profile$Z)
# Sys.sleep(2)
n = mean(profile$n) # Calculate the mean of n
# Extract vertices
a <- filter(profile, Position == "Lout") %>%
select(Y,Z)
b <- filter(profile, Position == "Lin") %>%
select(Y,Z)
c <- filter(profile, Position == "Rin") %>%
select(Y,Z)
d <- filter(profile, Position == "Rout") %>%
select(Y,Z)
#  e <- filter(profile, Position == "Lout") %>%
#    select(Y,Z)
z1 <- 1/abs((b$Z-a$Z)/(b$Y-a$Y))
z2 <- 1/abs((d$Z-c$Z)/(d$Y-c$Y))
# Calculate area
Base <- d$Y-a$Y
base <- c$Y-b$Y
h1 <- b$Z
h2 <- c$Z
abc <- base*h1/2
acd <- Base*h2/2
A[i] = abc + acd
# calcular perìmetro
l1 <- sqrt((a$Y-b$Y)^2+(a$Z-b$Z)^2)
l2 <- sqrt((b$Y-c$Y)^2+(b$Z-c$Z)^2)
l3 <- sqrt((c$Y-d$Y)^2+(c$Z-d$Z)^2)
l4 <- sqrt((d$Y-a$Y)^2+(d$Z-a$Z)^2)
P[i] <- l1+l2+l3+l4
# calcular pendiente
<<<<<<< HEAD
s = 0.082 #For now its a fixed value until we fix our data
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 60 * 3.785 / 1000
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
while (D>0.001){
=======
s1 <- filter(profile, Position == "Rout") %>%
select(Slope)
s <- s1$Slope
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 460 * 3.785 / 1000
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
while (D>0.01){
>>>>>>> origin/master
y <- y+0.0001
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
}
Y[i] <- y
}
R<- A/P
V <- (R^(2/3)*sqrt(s))/(n)
Q <- A*V
Section <- seq(1:max(data$Section))
flow <- data.frame(Section, A, P, R, V, Q, Y)
data <- left_join(data, flow, by = "Section")
Waterdepth<-data.frame(Section,Y)
write.csv(Waterdepth, file = "Data/WD.csv", row.names = F)
write.csv(data, file = "Data/Channel.csv", row.names = F)
write.csv(flow, file = "Data/Flow.csv", row.names = F)
<<<<<<< HEAD
data=read.csv("Data/ChannelMatlab.csv", sep=";", dec = ",", na.strings = "NaN")  # loading Outfall 002 Data
data$X <- data$X*2.54/100 # Convert to meters
data$Y <- data$Y*2.54/100
data$Z <- data$Z/100
A <- 0
P <- 0
Y <- 0
for (i in 1:max(data$Section)){
# extract profile of interest
profile <- data %>%
filter(Section == i, !Position == "Mid") %>%
select(Position, Y, Z, n)
plot(profile$Y, -profile$Z)
# Sys.sleep(2)
n = mean(profile$n) # Calculate the mean of n
# Extract vertices
a <- filter(profile, Position == "Lout") %>%
select(Y,Z)
b <- filter(profile, Position == "Lin") %>%
select(Y,Z)
c <- filter(profile, Position == "Rin") %>%
select(Y,Z)
d <- filter(profile, Position == "Rout") %>%
select(Y,Z)
#  e <- filter(profile, Position == "Lout") %>%
#    select(Y,Z)
z1 <- 1/abs((b$Z-a$Z)/(b$Y-a$Y))
z2 <- 1/abs((d$Z-c$Z)/(d$Y-c$Y))
# Calculate area
Base <- d$Y-a$Y
base <- c$Y-b$Y
h1 <- b$Z
h2 <- c$Z
abc <- base*h1/2
acd <- Base*h2/2
A[i] = abc + acd
# calcular perìmetro
l1 <- sqrt((a$Y-b$Y)^2+(a$Z-b$Z)^2)
l2 <- sqrt((b$Y-c$Y)^2+(b$Z-c$Z)^2)
l3 <- sqrt((c$Y-d$Y)^2+(c$Z-d$Z)^2)
l4 <- sqrt((d$Y-a$Y)^2+(d$Z-a$Z)^2)
P[i] <- l1+l2+l3+l4
# calcular pendiente
s = 0.082 #For now its a fixed value until we fix our data
# Iterate over values of y to make them match Qobs
b <- base
y = 0;
Qobs <- 60 * 3.785 / 1000
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
while (D>0.001){
y <- y+0.0001
Q <- (1/n)*(((y/2)*(b+(b+y*(z1+z2))))^(5/3))/((b+y*(sqrt(1+z1^2)+sqrt(1+z2^2)))^(2/3))*(s^(1/2))
D <- abs(Q-Qobs)
}
Y[i] <- y
}
R<- A/P
V <- (R^(2/3)*sqrt(s))/(n)
Q <- A*V
Section <- seq(1:max(data$Section))
flow <- data.frame(Section, A, P, R, V, Q, Y)
data <- left_join(data, flow, by = "Section")
Waterdepth<-data.frame(Section,Y)
write.csv(Waterdepth, file = "Data/WD.csv", row.names = F)
write.csv(data, file = "Data/Channel.csv", row.names = F)
write.csv(flow, file = "Data/Flow.csv", row.names = F)
=======
# for(i in 1:10){
#   JC[i] <- 2*i+4
#   print(i)
# }
>>>>>>> origin/master
2+2
a = funtion(x){a+1}
a = funtion(x){x+1}
a <- funtion(x){x+1}
a <- function(x){x+1}
a(1)
b <- function(x){2*x}
b(2)
b(a(1))
install.packages("tidyverse")
value <- my.second.function(my.first.function(1))
my.first.function <- function(x){x+1}
my.second.function <- function(x){2*x}
value <- my.second.function(my.first.function(1))
value <- my.first.function(1)
value <- my.second.function(value)
value <- my.second.function(value)
value <- my.second.function(my.first.function(1))
value <- my.second.function(my.first.function(1))
value <- my.second.function(my.first.function(1))
value <- my.second.function(value)
value <- my.first.function(1) %>%
my.second.function()
library(tidyverse)
value <- my.first.function(1) %>%
my.second.function()
value
