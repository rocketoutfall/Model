# CUrrently working: line 59
library(dplyr)
#################
#################
#################
na.zero <- function(x) {
x[is.na(x)] <- 0
return(x)
}
locations <- function(row, outfallfile, tnum) {
# row = which plant row we're looking at
# outfall file points to the csv containing the observations for the desired outfall
# tnum is number of transects -- count T0!!
data <- read.csv(file.path(getwd(), "Data", outfallfile), header=T)
pnum <- as.numeric(nrow(data))
transects <- data[1:(pnum),8:(tnum+8)]
horiz <- data[1:26,5:7]
zeros <- matrix(ncol=1, nrow=tnum) %>%
na.zero()
collect <- c()
# for loop to go through a column at a time (5-7)
# if horizon == 0 then append a whole column'sworth of 0s, else it appends the observations for the transects
for (i in 1:3) {
if (horiz[row,i] == 0)
collect <- c(collect, zeros) else
collect <- c(collect, transects[row,1:(tnum)])
next
}
# The for-loop created one loooong row of numbers, but since we know there are three columns, we can force it into a matrix with that size and a map is created
plant <- matrix(as.numeric(collect), ncol = 3, nrow = tnum)
return(plant)
}
#######################
#######################
#######################
# Loop through rows
######################
allplants <- function(OF, tnum) {
#OF is outfall, 19 or 20
#tnum is number of transects
#ft is functional type desired (name of column in vegdata-OF)
OFfile <- paste("vegdata-", OF, ".csv", sep="")
data <- read.csv(file.path(getwd(), "Data", OFfile), header=T)
pnum <- as.numeric(nrow(data))
p <- as.data.frame(locations(1, "vegdata-19.csv", 18))
write.csv(p, file=file.path(getwd(), "Data", paste("Plants", OF, sep=""), paste(i, strtrim(data[i,2], 5), "-", data[i,(colnames(data) = "WS")], ".csv", sep="")))
return()
}
#WS or FT are good for the type input
OF19 <- allplants(19, 18)
OF20 <- allplants(20, 7)
# Author: Elise Wall
# Date: 28 Jan 2017
# Purpose: To take observed data of plant locations, sort them into a matrix representing their spacial presence, then sum them by funtional type and create a heat map of species locations.
# CAVEAT: The data we have starts at T0, this makes the T0 set in row 1... so T17 in the data is in row 18 here. Keep that in mind.
# CUrrently working: line 59
library(dplyr)
#################
#################
#################
na.zero <- function(x) {
x[is.na(x)] <- 0
return(x)
}
locations <- function(row, outfallfile, tnum) {
# row = which plant row we're looking at
# outfall file points to the csv containing the observations for the desired outfall
# tnum is number of transects -- count T0!!
data <- read.csv(file.path(getwd(), "Data", outfallfile), header=T)
pnum <- as.numeric(nrow(data))
transects <- data[1:(pnum),8:(tnum+8)]
horiz <- data[1:26,5:7]
zeros <- matrix(ncol=1, nrow=tnum) %>%
na.zero()
collect <- c()
# for loop to go through a column at a time (5-7)
# if horizon == 0 then append a whole column'sworth of 0s, else it appends the observations for the transects
for (i in 1:3) {
if (horiz[row,i] == 0)
collect <- c(collect, zeros) else
collect <- c(collect, transects[row,1:(tnum)])
next
}
# The for-loop created one loooong row of numbers, but since we know there are three columns, we can force it into a matrix with that size and a map is created
plant <- matrix(as.numeric(collect), ncol = 3, nrow = tnum)
return(plant)
}
#######################
#######################
#######################
# Loop through rows
######################
allplants <- function(OF, tnum) {
#OF is outfall, 19 or 20
#tnum is number of transects
#ft is functional type desired (name of column in vegdata-OF)
OFfile <- paste("vegdata-", OF, ".csv", sep="")
data <- read.csv(file.path(getwd(), "Data", OFfile), header=T)
pnum <- as.numeric(nrow(data))
p <- as.data.frame(locations(1, "vegdata-19.csv", 18))
write.csv(p, file=file.path(getwd(), "Data", paste("Plants", OF, sep=""), paste(i, strtrim(data[i,2], 5), "-", data[i,(colnames(data) = "WS")], ".csv", sep="")))
return()
}
#WS or FT are good for the type input
OF19 <- allplants(19, 18)
OF20 <- allplants(20, 7)
# Author: Elise Wall
# Date: 28 Jan 2017
# Purpose: To take observed data of plant locations, sort them into a matrix representing their spacial presence, then sum them by funtional type and create a heat map of species locations.
# CAVEAT: The data we have starts at T0, this makes the T0 set in row 1... so T17 in the data is in row 18 here. Keep that in mind.
# CUrrently working: line 59
library(dplyr)
#################
#################
#################
na.zero <- function(x) {
x[is.na(x)] <- 0
return(x)
}
locations <- function(row, outfallfile, tnum) {
# row = which plant row we're looking at
# outfall file points to the csv containing the observations for the desired outfall
# tnum is number of transects -- count T0!!
data <- read.csv(file.path(getwd(), "Data", outfallfile), header=T)
pnum <- as.numeric(nrow(data))
transects <- data[1:(pnum),8:(tnum+8)]
horiz <- data[1:26,5:7]
zeros <- matrix(ncol=1, nrow=tnum) %>%
na.zero()
collect <- c()
# for loop to go through a column at a time (5-7)
# if horizon == 0 then append a whole column'sworth of 0s, else it appends the observations for the transects
for (i in 1:3) {
if (horiz[row,i] == 0)
collect <- c(collect, zeros) else
collect <- c(collect, transects[row,1:(tnum)])
next
}
# The for-loop created one loooong row of numbers, but since we know there are three columns, we can force it into a matrix with that size and a map is created
plant <- matrix(as.numeric(collect), ncol = 3, nrow = tnum)
return(plant)
}
#######################
#######################
#######################
# Loop through rows
######################
allplants <- function(OF, tnum) {
#OF is outfall, 19 or 20
#tnum is number of transects
#ft is functional type desired (name of column in vegdata-OF)
OFfile <- paste("vegdata-", OF, ".csv", sep="")
data <- read.csv(file.path(getwd(), "Data", OFfile), header=T)
pnum <- as.numeric(nrow(data))
for(i in pnum) {
p <- as.data.frame(locations(i, "vegdata-19.csv", 18))
write.csv(p, file=file.path(getwd(), "Data", paste("Plants", OF, sep=""), paste(i, strtrim(data[i,2], 5), "-", data[i,(colnames(data) = "WS")], ".csv", sep="")))
}
return()
}
#WS or FT are good for the type input
OF19 <- allplants(19, 18)
OF20 <- allplants(20, 7)
allplants <- function(OF, tnum) {
#OF is outfall, 19 or 20
#tnum is number of transects
#ft is functional type desired (name of column in vegdata-OF)
OFfile <- paste("vegdata-", OF, ".csv", sep="")
data <- read.csv(file.path(getwd(), "Data", OFfile), header=T)
pnum <- as.numeric(nrow(data))
for(i in 1:pnum) {
p <- as.data.frame(locations(i, "vegdata-19.csv", 18))
write.csv(p, file=file.path(getwd(), "Data", paste("Plants", OF, sep=""), paste(i, strtrim(data[i,2], 5), "-", data[i,(colnames(data) = "WS")], ".csv", sep="")))
}
return()
}
#WS or FT are good for the type input
OF19 <- allplants(19, 18)
OF20 <- allplants(20, 7)
allplants <- function(OF, tnum) {
#OF is outfall, 19 or 20
#tnum is number of transects
#ft is functional type desired (name of column in vegdata-OF)
OFfile <- paste("vegdata-", OF, ".csv", sep="")
data <- read.csv(file.path(getwd(), "Data", OFfile), header=T)
pnum <- as.numeric(nrow(data))
for(i in 1:pnum) {
p <- as.data.frame(locations(i, paste("vegdata-", OF, ".csv", sep=""), tnum))
write.csv(p, file=file.path(getwd(), "Data", paste("Plants", OF, sep=""), paste(i, strtrim(data[i,2], 5), "-", data[i,(colnames(data) = "WS")], ".csv", sep="")))
}
return()
}
#WS or FT are good for the type input
OF19 <- allplants(19, 18)
OF20 <- allplants(20, 7)
allplants <- function(OF, tnum) {
#OF is outfall, 19 or 20
#tnum is number of transects
#ft is functional type desired (name of column in vegdata-OF)
OFfile <- paste("vegdata-", OF, ".csv", sep="")
data <- read.csv(file.path(getwd(), "Data", OFfile), header=T)
pnum <- as.numeric(nrow(data))
for(i in 1:pnum) {
p <- as.data.frame(locations(i, paste("vegdata-", OF, ".csv", sep=""), tnum))
write.csv(p, file=file.path(getwd(), "Data", paste("Plants", OF, sep=""), paste(i, strtrim(data[i,2], 5), "-", data[i,(colnames(data) = "WS")], ".csv", sep="")))
}
return()
}
#WS or FT are good for the type input
OF19 <- allplants(19, 18)
OF20 <- allplants(20, 7)
allplants <- function(OF, tnum) {
#OF is outfall, 19 or 20
#tnum is number of transects
#ft is functional type desired (name of column in vegdata-OF)
OFfile <- paste("vegdata-", OF, ".csv", sep="")
data <- read.csv(file.path(getwd(), "Data", OFfile), header=T)
pnum <- as.numeric(nrow(data))
for(i in 1:pnum) {
p <- as.data.frame(locations(i, paste("vegdata-", OF, ".csv", sep=""), tnum))
write.csv(p, file=file.path(getwd(), "Data", paste("Plants", OF, sep=""), paste(i, strtrim(data[i,2], 5), "-", data[i,(colnames(data) == "WS")], ".csv", sep="")))
}
return()
}
#WS or FT are good for the type input
OF19 <- allplants(19, 18)
OF20 <- allplants(20, 7)
allplants <- function(OF, tnum) {
#OF is outfall, 19 or 20
#tnum is number of transects
#ft is functional type desired (name of column in vegdata-OF)
OFfile <- paste("vegdata-", OF, ".csv", sep="")
data <- read.csv(file.path(getwd(), "Data", OFfile), header=T)
pnum <- as.numeric(nrow(data))
for(i in 1:pnum) {
p <- as.data.frame(locations(i, paste("vegdata-", OF, ".csv", sep=""), tnum))
write.csv(p, file=file.path(getwd(), "Data", paste("Plants", OF, sep=""), paste(i, strtrim(data[i,2], 5), "-", data[i,(colnames(data) == "WS")], ".csv", sep="")))
}
return()
}
#WS or FT are good for the type input
OF19 <- allplants(19, 18)
OF20 <- allplants(20, 7)
allplants <- function(OF, tnum, type) {
#OF is outfall, 19 or 20
#tnum is number of transects
#type is functional type desired (name of column in vegdata-OF)
OFfile <- paste("vegdata-", OF, ".csv", sep="")
data <- read.csv(file.path(getwd(), "Data", OFfile), header=T)
pnum <- as.numeric(nrow(data))
for(i in 1:pnum) {
p <- as.data.frame(locations(i, paste("vegdata-", OF, ".csv", sep=""), tnum))
write.csv(p, file=file.path(getwd(), "Data", paste("Plants", OF, sep=""), paste(i, strtrim(data[i,2], 5), "-", data[i,(colnames(data) == type)], ".csv", sep="")))
}
return()
}
#WS or FT are good for the type input
OF19 <- allplants(19, 18, "FT")
OF20 <- allplants(20, 7, "FT")
match <- list.files(path = file.path(getwd(), "Data", "Plants20"), pattern = "FACW")
sum <- matrix(ncol = 3, nrow = 7) %>%
na.zero()
for (i in 1:length(match)) {
path <- file.path(getwd(), "Data", "Plants20", match[i])
p <- read.csv(path)[ ,2:4] %>%
data.matrix()
sum <- sum + p
}
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R")
# WS or FT are good for the type input
# Try "Habitat"? Some data entry isnt perfect eg "T/S"
OF19 <- allplants(19, 18, "FT")
OF20 <- allplants(20, 7, "FT")
#######################
#######################
#######################
# FUNCTIONAL TYPE SUMMATION
# Call the csvs for all files in an Outfall matching the desired functional type or habitat
match <- list.files(path = file.path(getwd(), "Data", "Plants20"), pattern = "FACW")
sum <- matrix(ncol = 3, nrow = 7) %>%
na.zero()
for (i in 1:length(match)) {
path <- file.path(getwd(), "Data", "Plants20", match[i])
p <- read.csv(path)[ ,2:4] %>%
data.matrix()
sum <- sum + p
}
#############
#############
#############
# Heat Map
##########
# http://flowingdata.com/2010/01/21/how-to-make-a-heatmap-a-quick-and-easy-solution/
data1 <- read.csv(file.path(getwd(), "Data", "Plants19", "1Adeno-UPL.csv")) %>%
select(2:4) %>%
data.matrix()
OF20m <- data
OF20_heatmap <- heatmap(OF20m, Rowv=NA, Colv=NA, col = cm.colors(256), scale="none", margins=c(5,10))
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R")
# WS or FT are good for the type input
# Try "Habitat"? Some data entry isnt perfect eg "T/S"
OF19 <- allplants(19, 18, "FT")
OF20 <- allplants(20, 7, "FT")
#######################
#######################
#######################
# FUNCTIONAL TYPE SUMMATION
# Call the csvs for all files in an Outfall matching the desired functional type or habitat
match <- list.files(path = file.path(getwd(), "Data", "Plants20"), pattern = "FACW")
sum <- matrix(ncol = 3, nrow = 7) %>%
na.zero()
for (i in 1:length(match)) {
path <- file.path(getwd(), "Data", "Plants20", match[i])
p <- read.csv(path)[ ,2:4] %>%
data.matrix()
sum <- sum + p
}
#############
#############
#############
# Heat Map
##########
# http://flowingdata.com/2010/01/21/how-to-make-a-heatmap-a-quick-and-easy-solution/
data1 <- read.csv(file.path(getwd(), "Data", "Plants19", "1Adeno-UPL.csv")) %>%
select(2:4) %>%
data.matrix()
OF20m <- data
OF20_heatmap <- heatmap(OF20m, Rowv=NA, Colv=NA, col = cm.colors(256), scale="none", margins=c(5,10))
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
OF19 <- allplants(19, 18, "FT")
OF20 <- allplants(20, 7, "FT")
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
OF19 <- allplants(19, 18, "FT")
OF20 <- allplants(20, 7, "FT")
match <- list.files(path = file.path(getwd(), "Data", "Plants20"), pattern = "DR")
sum <- matrix(ncol = 3, nrow = 7) %>%
na.zero()
for (i in 1:length(match)) {
path <- file.path(getwd(), "Data", "Plants20", match[i])
p <- read.csv(path)[ ,2:4] %>%
data.matrix()
sum <- sum + p
}
ftsummation <- function(OF, FT, tnum) {
#FT is the specific variant of the functional type you want (Like, DR or OBL)
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", OF, sep=""), pattern = FT)
sum <- matrix(ncol = 3, nrow = tnum) %>%
na.zero()
for (i in 1:length(match)) {
path <- file.path(getwd(), "Data", paste("Plants", OF, sep=""), match[i])
p <- read.csv(path)[ ,2:4] %>%
data.matrix()
sum <- sum + p
}
return(sum)
}
ftsummation <- function(OF, FT, tnum) {
#FT is the specific variant of the functional type you want (Like, DR or OBL)
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", OF, sep=""), pattern = FT))
sum <- matrix(ncol = 3, nrow = tnum) %>%
na.zero()
for (i in 1:length(match)) {
path <- file.path(getwd(), "Data", paste("Plants", OF, sep=""), match[i])
p <- read.csv(path)[ ,2:4] %>%
data.matrix()
sum <- sum + p
}
return(sum)
}
ftsummation(19, "DR", 7)
DR19 <- ftsummation(19, "DR", 7)
match <- list.files(path = file.path(getwd(), "Data", "Plants19"), pattern = "DR")
sum <- matrix(ncol = 3, nrow = 7) %>%
na.zero()
for (i in 1:length(match)) {
path <- file.path(getwd(), "Data", "Plants19", match[i])
p <- read.csv(path)[ ,2:4] %>%
data.matrix()
sum <- sum + p
}
match <- list.files(path = file.path(getwd(), "Data", "Plants19"), pattern = "DR")
sum <- matrix(ncol = 3, nrow = 18) %>%
na.zero()
for (i in 1:length(match)) {
path <- file.path(getwd(), "Data", "Plants19", match[i])
p <- read.csv(path)[ ,2:4] %>%
data.matrix()
sum <- sum + p
}
DR19 <- ftsummation(19, "DR", 18)
match <- list.files(path = file.path(getwd(), "Data", "Plants19"), pattern = "DR")
match[1]
DR19 <- ftsummation(19, "DR", 18)
ftsummation <- function(OF, FT, tnum) {
#FT is the specific variant of the functional type you want (Like, DR or OBL)
match <- list.files(path = file.path(getwd(), "Data", "Plants19"), pattern = "DR")
sum <- matrix(ncol = 3, nrow = tnum) %>%
na.zero()
for (i in 1:length(match)) {
path <- file.path(getwd(), "Data", paste("Plants", OF, sep=""), match[i])
p <- read.csv(path)[ ,2:4] %>%
data.matrix()
sum <- sum + p
}
return(sum)
}
DR19 <- ftsummation(19, "DR", 18)
View(DR19)
View(DR19)
ftsummation <- function(OF, FT, tnum) {
#FT is the specific variant of the functional type you want (Like, DR or OBL)
match <- list.files(path = file.path(getwd(), "Data", "Plants19"), pattern = FT)
sum <- matrix(ncol = 3, nrow = tnum) %>%
na.zero()
for (i in 1:length(match)) {
path <- file.path(getwd(), "Data", paste("Plants", OF, sep=""), match[i])
p <- read.csv(path)[ ,2:4] %>%
data.matrix()
sum <- sum + p
}
return(sum)
}
DR19 <- ftsummation(19, "DR", 18)
ftsummation <- function(OF, FT, tnum) {
#FT is the specific variant of the functional type you want (Like, DR or OBL)
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", OF, sep=""), pattern = FT))
sum <- matrix(ncol = 3, nrow = tnum) %>%
na.zero()
for (i in 1:length(match)) {
path <- file.path(getwd(), "Data", paste("Plants", OF, sep=""), match[i])
p <- read.csv(path)[ ,2:4] %>%
data.matrix()
sum <- sum + p
}
return(sum)
}
DR19 <- ftsummation(19, "DR", 18)
ftsummation <- function(OF, FT, tnum) {
#FT is the specific variant of the functional type you want (Like, DR or OBL)
match <- list.files(path = file.path(getwd(), "Data", paste("Plants", OF, sep="")), pattern = FT)
sum <- matrix(ncol = 3, nrow = tnum) %>%
na.zero()
for (i in 1:length(match)) {
path <- file.path(getwd(), "Data", paste("Plants", OF, sep=""), match[i])
p <- read.csv(path)[ ,2:4] %>%
data.matrix()
sum <- sum + p
}
return(sum)
}
DR19 <- ftsummation(19, "DR", 18)
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
#######################
#######################
#######################
# PLANT LOCATION GENERATION
# These save .csvs for each plant in Model>Data>Plants##
# Deep-rooted vs shallow-rooted
allplants(19, 18, "FT")
allplants(20, 7, "FT")
# Wetland Status
allplants(19, 18, "WS")
allplants(20, 7, "WS")
# Next time:
# Try "Habitat"? Some data entry isnt perfect eg "T/S"
allplants(19, 18, "Habitat")
allplants(20, 7, "Habitat")
#######################
#######################
#######################
# FUNCTIONAL TYPE SUMMATION
# This generates a matrix which can be used for a heat map of a desited functional type
DR19 <- ftsummation(19, "DR", 18)
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
#######################
#######################
#######################
# PLANT LOCATION GENERATION
# These save .csvs for each plant in Model>Data>Plants##
# Deep-rooted vs shallow-rooted
allplants(19, 18, "FT")
allplants(20, 7, "FT")
# Wetland Status
allplants(19, 18, "WS")
allplants(20, 7, "WS")
DR19 <- ftsummation(19, "DR", 18)
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
DR19 <- ftsummation(19, "FT", "DR", 18)
View(DR19)
DR19 <- ftsummation(19, "FT", "DR", 18)
SR19 <- ftsummation(19, "FT", "SR", 18)
DR20 <- ftsummation(20, "FT", "DR", 7)
SR20 <- ftsummation(20, "FT", "SR", 7)
class(SR20)
data <- DR19
OF20_heatmap <- heatmap(data, Rowv=NA, Colv=NA, col = cm.colors(256), scale="none", margins=c(5,10))
source(file.path(getwd(), "Plant_Locations", "matrix-functions.R"))
DR19 <- ftsummation(19, "FT", "DR", 18)
SR19 <- ftsummation(19, "FT", "SR", 18)
DR20 <- ftsummation(20, "FT", "DR", 7)
SR20 <- ftsummation(20, "FT", "SR", 7)
#######################
#######################
#######################
# HEAT MAP GENERATION
##########
# http://flowingdata.com/2010/01/21/how-to-make-a-heatmap-a-quick-and-easy-solution/
data <- DR19
heatmap(data, Rowv=NA, Colv=NA, col = cm.colors(256), scale="none", margins=c(5,10))
heatmap(data, Rowv=NA, Colv=NA, col = cm.colors(256), scale="none", margins=c(5,10))
